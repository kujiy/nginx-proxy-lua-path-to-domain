worker_processes  1;
error_log  /dev/stderr ;
#error_log  /dev/stderr debug;

events {
    worker_connections  256;
}

http {

    upstream my_backend {
        server 192.168.56.105:80;
    }

    server {
        listen       8888;
        server_name  localhost;
       rewrite_log on;

       proxy_redirect off;
     proxy_intercept_errors on;
    proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;


#       root  /usr/share/nginx/html/;

       location /favicon.ico {
          return 200;
       }
       # これがないとhostnameをjson urlにしてアクセスする / の処理が無限ループする
       location /mylocalapi {
         proxy_pass http://my_backend;
       }
#        location /a     {
#           rewrite ^(/a.*)$ /a break;    
#        }

        # /path or /aaa
    # to http://upstream/mylocalapi/api/v1/nodes/NHNLOED1611/ipmi
        location / {
            set $upstream "";
            default_type text/simple;
            rewrite_by_lua_block {
--           ngx.say("Hellow world root")
--           ngx.say("path=" .. ngx.var.uri)

           -- redisにipキャッシュがあるか問い合わせ
           local res = ngx.location.capture("/redis" .. ngx.var.uri)
               if res.status == ngx.HTTP_OK then
                  ngx.var.upstream       = res.body
               else
              -- redisにない場合

          -- dnsに聞いてみる /hostname -> hostname.bmc.my-example-corp.com にする
                  local hostname = ngx.re.sub(ngx.var.uri, "/(.*)/?", "$1", "o")
                  hostname = ngx.re.sub(hostname ,   "(.*)/", "$1", "o")
--          ngx.say("hostname =     " .. hostname) 
          askdomain = hostname .. ".bmc.my-example-corp.com"
--          ngx.say(" dns ask url = " .. askurl )

                 -- dns connection
                 local resolver = require "resty.dns.resolver"
                 local r, err = resolver:new{
                     nameservers = {"192.168.0.1" },
                     retrans = 1,  -- 5 retransmissions on receive timeout
                     timeout = 1000,  -- 2 sec
                 }
     
                 if not r then
             -- dns serverがおかしかったらjson apiに回す
                        local res = ngx.location.capture("/getjson/" .. hostname )
                    ngx.say(res.body)
                     ngx.say("failed to instantiate the resolver: ", err)
                     return
                 end
     
                 --local answers, err, tries = r:query("www.google.com", nil, {})
                 local answers, err, tries = r:query(askdomain , nil, {})
                 if not answers then
             -- dns resolveできなければjson apiに回す
                        local res = ngx.location.capture("/getjson/" .. hostname )
                    ngx.say(res.body)
                     ngx.say("failed to query the DNS server: ", err)
                     ngx.say("retry historie:\n  ", table.concat(tries, "\n  "))
                     return
                 end
     
                 if answers.errcode then
             -- dns resolveできなければjson apiに回す
                        local res = ngx.location.capture("/getjson/" .. hostname )
                    ngx.say(res.body)
--                     ngx.say("server returned error code: ", answers.errcode, ": ", answers.errstr)
                 end
     
                 -- dns取れた場合は、そのままupstreamとして回す
                 for i, ans in ipairs(answers) do
             --ngx.say(ans.name, " ", ans.address or ans.cname,
                     --        " type:", ans.type, " class:", ans.class,
                     --        " ttl:", ans.ttl)
                     local ip = ans.address
                     ip =   "192.168.56.105"
             --ngx.say("resolved ip =" .. ip )
                     ngx.var.upstream = ip
--             ngx.say("upstream = " .. ngx.var.upstream)
    --         return
                 end
           end
            }

            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://$upstream;
            proxy_redirect ~^(http://[^:]+):\d+(/.+)$ $1$2;
    }

        location /getjson {
            set $upstream "";
         #   default_type text/simple;
            rewrite_by_lua_block {
     --      ngx.say("path=" .. ngx.var.uri)
               hostname = ngx.re.sub(ngx.var.uri, "/getjson/(.*)/?", "$1", "o")
--               ngx.say("hostname =" .. hostname   )

           -- redisにipキャッシュがあるか問い合わせ
           local res = ngx.location.capture("/redis" .. hostname   )
               if res.status == ngx.HTTP_OK then
                  ngx.say("REDIS DNS HIT!!!!!!")
                  ngx.var.upstream       = res.body
               else
              -- redisにない場合
--                 ngx.say("redis dns no hit...")

          -- json apiからip取得
          ngx.req.read_body()
          ngx.req.set_header("Content-Type", "application/json")
              local jsonurl = "/mylocalapi/api/v1/nodes/" .. hostname  .. "/ipmi"
--              ngx.say("json jsonurl =" .. jsonurl        )
                  local res = ngx.location.capture(jsonurl)
          --    ngx.say("res.body--------------")
          --    ngx.say(res.body)
          local cjson = require 'cjson'
          local data = cjson.decode(res.body)
          local ipstr = data[hostname]["ipmi"]["1"] 
    --      ngx.say("ipstr=" .. ipstr)
                  local ip = ngx.re.sub(ipstr, ".*DHCP: ?+(.*)/.*", "$1", "o")
    --      ngx.say("extracted IP address by regex=" .. ip)
                  ip = "192.168.56.105"
                  --ngx.exit(ngx.HTTP_FORBIDDEN)

          -- redisに保存

                local redis = require "resty.redis"
                local red = redis:new()

                red:set_timeout(1000) -- 1 sec

                local ok, err = red:connect("127.0.0.1", 6379)
                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

--          do return end

                -- /path をkeyにして, ip をvalとしてredisに保存
                ok, err = red:set(hostname, ip)
             --   ngx.say("redis: set, ok=", ok )
                res, err = red:get(hostname)
--                ngx.say("redis: get hostname= ", res)
                

               ngx.var.upstream = ip
               ngx.var.uri = "/"
--           ngx.say("upstream=" ..  ngx.var.upstream   )

                -- put it into the connection pool of size 100,
                -- with 10 seconds max idle time
                local ok, err = red:set_keepalive(10000, 100)
                if not ok then
                    ngx.say("failed to set keepalive: ", err)
                   -- return
                end
               end

                
            }
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://$upstream;
            proxy_redirect ~.*/getjson(.*)/(.*)$ $2;
        }

        location /redis {

             #rewrite_by_lua_block {
         #   ngx.say("Hellow world")
         #}
             internal;
             set            $redis_key $host;
             #set            $redis_key $uri;
             redis_pass     127.0.0.1:6379;
             default_type   text/html;
        }
   }
}
